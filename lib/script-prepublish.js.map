{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/script-prepublish.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,mBAAA;IAAA,oBAAA;;;EAGA,EAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,EAAE,CAAC,GAA/B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAA5B;;EACA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAP5B;;;EAUA,IAAA,GAAsB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,oBAArB,CAAb;;EACtB,MAAA,GAAsB,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB;IAAE,QAAA,EAAU;EAAZ,CAAtB;;EACtB,gBAAA;;AAAwB;AAAA;IAAA,KAAA,QAAA;mBAAA,CAAC,CAAE,CAAF;IAAD,CAAA;;;;EACxB,iBAAA;;AAAwB;IAAA,KAAA,gCAAA;mBAAA;IAAA,CAAA;;;;EACxB,iBAAA;;AAAwB;IAAA,KAAA,mDAAA;;UAAwC,CAAI,IAAI,CAAC,UAAL,CAAgB,WAAhB;qBAA5C;;IAAA,CAAA;;;;EACxB,iBAAA;;AAAwB;IAAA,KAAA,mDAAA;;UAAwC,CAAI,IAAI,CAAC,UAAL,CAAgB,GAAhB;qBAA5C;;IAAA,CAAA;;;;EACxB,kBAAA;;AAAwB;IAAA,KAAA,mDAAA;;uBAAoD,kBAAZ;qBAAxC;;IAAA,CAAA;;;;EACxB,mBAAA;;AAAwB;IAAA,KAAA,kDAAA;;uBAAoD,mBAAZ;qBAAxC;;IAAA,CAAA;;OAjBxB;;;;;EAsBA,GAAA,CAAI,6DAAJ;;EACA,GAAA,CAAI,UAAJ;;EACA,IAAG,kBAAkB,CAAC,MAAnB,GAA4B,CAA/B;IACE,GAAA,CAAI,6DAAJ;IACA,GAAA,CAAI,CAAA,oBAAA,CAAA,CAAuB,kBAAkB,CAAC,MAA1C,CAAA,EAAA,CAAJ;IACA,GAAA,CAAI,6DAAJ;IACA,GAAA,CAAI,kBAAkB,CAAC,IAAnB,CAAwB,IAAxB,CAAJ,EAJF;;;EAMA,IAAG,mBAAmB,CAAC,MAApB,GAA6B,CAAhC;IACE,GAAA,CAAI,6DAAJ;IACA,GAAA,CAAI,CAAA,qBAAA,CAAA,CAAwB,mBAAmB,CAAC,MAA5C,CAAA,EAAA,CAAJ;IACA,GAAA,CAAI,6DAAJ;IACA,GAAA,CAAI,mBAAmB,CAAC,IAApB,CAAyB,IAAzB,CAAJ,EAJF;;;EAKA,GAAA,CAAI,6DAAJ;AAnCA",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nWG                        = require './main'\n{ rpr }                   = WG.trm\n{ log }                   = console\nFS                        = require 'fs'\nPATH                      = require 'path'\n\n#===========================================================================================================\npath                = PATH.resolve PATH.join __dirname, '../README-types.md'\nreadme              = FS.readFileSync path, { encoding: 'utf-8', }\ndocumented_types    = ( m[ 1 ] for m from readme.matchAll /\\n#### `([^`]+)`/ugs )\nimplemented_types   = ( type for type of ( require './types' ).isa )\nimplemented_types   = ( type for type in implemented_types when not type.startsWith 'optional_' )\nimplemented_types   = ( type for type in implemented_types when not type.startsWith '$' )\nundocumented_types  = ( type for type in implemented_types when type not in documented_types )\nunimplemented_types = ( type for type in documented_types  when type not in implemented_types )\n\n#===========================================================================================================\n# log documented_types\n# log implemented_types\nlog '==========================================================='\nlog __filename\nif undocumented_types.length > 0\n  log '==========================================================='\n  log \"Undocumented types (#{undocumented_types.length}):\"\n  log '==========================================================='\n  log undocumented_types.join ', '\n\nif unimplemented_types.length > 0\n  log '==========================================================='\n  log \"Unimplemented types (#{unimplemented_types.length}):\"\n  log '==========================================================='\n  log unimplemented_types.join ', '\nlog '==========================================================='\n\n"
  ]
}