{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nprops                     = null\n{ debug }                 = console\n#-----------------------------------------------------------------------------------------------------------\nisa_function              = ( x ) -> ( Object::toString.call x ) is '[object Function]'\nisa_class                 = ( x ) ->\n  ( ( Object::toString.call x ) is '[object Function]' ) and \\\n    ( Object.getOwnPropertyDescriptor x, 'prototype' )?.writable is false\n\n\n#===========================================================================================================\n@Isa = class Isa\n\n  #=========================================================================================================\n  # Bottom Types\n  #---------------------------------------------------------------------------------------------------------\n  null:          ( x ) -> x is null\n  undefined:     ( x ) -> x is undefined\n\n  #=========================================================================================================\n  # Textual Types\n  #---------------------------------------------------------------------------------------------------------\n  text:          ( x ) -> ( typeof x ) is 'string'\n  codepoint:     ( x ) -> ( @isa.text x ) and ( /^.$/u.test x )\n  regex:         ( x ) -> ( Object::toString.call x ) is '[object RegExp]'\n  buffer:        ( x ) -> ( globalThis.Buffer?.isBuffer ? -> false ) x\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://github.com/mathiasbynens/mothereff.in/blob/master/js-variables/eff.js and\n  https://mathiasbynens.be/notes/javascript-identifiers-es6 ###\n  jsidentifier:  ( x ) -> ( @isa.text x ) and ( x.match \\\n    /// ^ (?: [ $_ ] | \\p{ID_Start} ) (?: [ $ _ \\u{200c} \\u{200d} ] | \\p{ID_Continue} )* $ ///u )?\n\n  #=========================================================================================================\n  # Container Types\n  #---------------------------------------------------------------------------------------------------------\n  list:       ( x ) -> Array.isArray x\n  set:        ( x ) -> x instanceof Set\n  map:        ( x ) -> x instanceof Map\n  # sized:      ( x ) -> try ( ( Reflect.has x, 'length' ) or ( Reflect.has x, 'size' ) ) catch error then false\n\n  # container:  ( x ) -> ( typeof x ) isnt 'string' and ( @isa.iterable x ) and ( @isa.sized x )\n  # iterable:   ( x ) -> ( ( typeof x ) is 'string' ) and try ( Reflect.has Symbol.iterator ) catch error then false\n\n  #=========================================================================================================\n  # Numeric Types\n  #---------------------------------------------------------------------------------------------------------\n  infinity:      ( x ) -> ( x is +Infinity ) or ( x is -Infinity )\n  float:         ( x ) -> Number.isFinite x\n  numeric:       ( x ) -> ( Number.isFinite x ) or ( typeof x is 'bigint' )\n  bigint:        ( x ) -> typeof x is 'bigint'\n  integer:       ( x ) -> Number.isInteger x\n  codepointid:   ( x ) -> ( @isa.integer x ) and ( 0x00000 <= x <= 0x1ffff )\n  cardinal:      ( x ) -> ( Number.isInteger x ) and ( x >= 0 )\n  zero:          ( x ) -> x is 0 ### NOTE true for -0 as well ###\n  nan:           ( x ) -> Number.isNaN x\n  nonzero:       ( x ) -> ( @isa.numeric x ) and ( not @isa.zero x )\n\n  #---------------------------------------------------------------------------------------------------------\n  even:          ( x ) -> ( Number.isInteger x ) and ( ( x % 2 ) is   0 )\n  odd:           ( x ) -> ( Number.isInteger x ) and ( ( x % 2 ) isnt 0 )\n\n  #=========================================================================================================\n  # Classes\n  #---------------------------------------------------------------------------------------------------------\n  class:          ( x ) -> isa_class x\n\n  #=========================================================================================================\n  # Other Types\n  #---------------------------------------------------------------------------------------------------------\n  boolean:        ( x ) -> ( x is true ) or ( x is false )\n  object:         ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  buffer:         ( x ) -> if globalThis.Buffer? then Buffer.isBuffer x else false\n  function:       ( x ) -> isa_function x\n  asyncfunction:  ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:         ( x ) -> ( typeof x ) is 'symbol'\n\n  #=========================================================================================================\n  # Existential Types\n  #---------------------------------------------------------------------------------------------------------\n  nothing:        ( x ) -> not x?\n  something:      ( x ) -> x?\n  anything:       ( x ) -> true\n\n\n#===========================================================================================================\ndo rename_isa_methods = =>\n  props ?= require './props'\n  for key in props.public_keys Isa::\n    continue unless isa_function ( f = Isa::[ key ] )\n    # do ( f ) =>\n    props.nameit \"isa_#{key}\", f\n      # return null\n  # console.log 26575, Isa::[ key ] for key in props.public_keys Isa::\n  return null\n\n\n#===========================================================================================================\ndefaults                  = Object.freeze\n  types_cfg:\n    declarations: Isa\n\n\n#===========================================================================================================\n@Types = class Types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg = { defaults.types_cfg..., cfg..., }\n    # debug '^constructor@1^', cfg.declarations.constructor.name, cfg.declarations\n    @_compile cfg.declarations\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_keys_and_methods: ( x ) ->\n    ### Iterate over enumerable `[ key, method, ]` pairs of `x` and its prototypes. The iteration will start\n    with `x.prototype` ) `x::` if `x` is a class and with `x` itself otherwise. ###\n    props  ?= require './props'\n    top     = if isa_class x then ( x:: ) else x\n    for key in props.public_keys top\n      method = top[ key ]\n      continue unless isa_function method\n      yield [ key, method, ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile: ( declarations ) ->\n    props        ?= require './props'\n    @isa          = {}\n    @validate     = {}\n    props.hide @, '_isa_methods', []\n    declarations  = if isa_class then ( declarations:: ) else ( declarations )\n    me            = @\n    #.......................................................................................................\n    cfg =\n      target:     @isa\n      descriptor: { enumerable: false, }\n      overwrite:  false\n      #.....................................................................................................\n      generator:  ({ target, owner, key: type, descriptor, }) ->\n        yield { key: type, descriptor, }\n        #...................................................................................................\n        value       = ( x ) => ( not x? ) or ( target[ type ] x )\n        descriptor  = { descriptor..., value, }\n        yield { key: \"optional_#{type}\", descriptor, }\n        #...................................................................................................\n        return null\n      #.....................................................................................................\n      decorator:  ({ target, owner, key: type, descriptor: { value, }, }) ->\n        # debug '^_compile@1^', { type, value, }\n        value = props.nameit \"isa_#{type}\", value.bind me\n        #...................................................................................................\n        unless ( type.startsWith 'optional_' ) or ( type in [ 'nothing', 'something', 'anything', ] )\n          me._isa_methods.push [ type, value, ]\n        return { value, }\n    #.......................................................................................................\n    props.acquire_depth_first declarations, cfg\n    # debug '^_compile@2^', ( k for k of @isa )\n    return null\n\n    #.......................................................................................................\n    #.......................................................................................................\n    #.......................................................................................................\n    for [ type, method, ] from @_walk_keys_and_methods declarations\n      # debug '^_compile@1^', type, method\n      method              = method.bind @\n      otype               = \"optional_#{type}\"\n      @isa[ type   ] = method\n      #.....................................................................................................\n      do ( type, otype, method ) =>\n        #...................................................................................................\n        # isa_optional_$type\n        @isa[ otype  ] = props.nameit \"isa_#{otype}\", ( x ) =>\n          return ( not x? ) or ( method x )\n        #...................................................................................................\n        # validate_$type\n        @validate[ type   ] = props.nameit \"validate_#{type}\", ( x ) =>\n          return x if ( method x )\n          throw new Error \"expected a #{type} got a #{@type_of x}\"\n        #...................................................................................................\n        # validate_optional_$type\n        @validate[ otype  ] = props.nameit \"validate_#{otype}\", ( x ) =>\n          return x if ( not x? ) or ( method x )\n          throw new Error \"expected an #{otype} got a #{@type_of x}\"\n      #.....................................................................................................\n      continue if type in [ 'nothing', 'something', 'anything', ]\n      @_isa_methods.push [ type, method, ]\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( x ) ->\n    for [ type, isa_method, ] in @_isa_methods\n      return type if isa_method x\n    # debug '^Types::type_of@1^', @get_denicola_device_name x\n    return type.toLowerCase() unless ( type = @get_denicola_device_name x ) is '0'\n    ### TAINT return class name? ###\n    ### TAINT raise exception? ###\n    return 'something'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_miller_device_name:   ( x ) -> R = Object::toString.call x; R[ 8 ... R.length - 1 ]\n  get_denicola_device_name: ( x ) -> x?.constructor.name ? '0'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_carter_device_name: ( x, miller_device_name = null ) ->\n    miller_device_name ?= Object::toString.call x\n    return 'other'  unless miller_device_name in [ '[object Function]', 'Function', ]\n    return 'fn'     unless ( descriptor = Object.getOwnPropertyDescriptor x, 'prototype' )?\n    return 'fn'     if descriptor.writable\n    return 'class'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_type_signature: ( x ) -> [\n    ( typeof                    x                   )\n    ( @get_miller_device_name   x                   )\n    ( @get_denicola_device_name x                   )\n    ( @get_carter_device_name   x                   )\n    ( if Number.isNaN           x then 'N' else '0' ) ].join '/'\n\n\n#===========================================================================================================\nmodule.exports          = new Types()\nmodule.exports.Isa      = Isa\nmodule.exports.Types    = Types\n\n"
  ]
}