{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nprops                     = require './props'\nisa_function              = ( x ) -> ( Object::toString.call x ) is '[object Function]'\n{ debug }                 = console\n\n\n#===========================================================================================================\nclass Isa\n\n  #=========================================================================================================\n  # Bottom Types\n  #---------------------------------------------------------------------------------------------------------\n  null:          ( x ) -> x is null\n  undefined:     ( x ) -> x is undefined\n\n  #=========================================================================================================\n  # Textual Types\n  #---------------------------------------------------------------------------------------------------------\n  text:          ( x ) -> ( typeof x ) is 'string'\n  codepoint:     ( x ) -> ( ( typeof x ) is 'string' ) and /^.$/u.test x\n  regex:         ( x ) -> ( Object::toString.call x ) is '[object RegExp]'\n  buffer:        ( x ) -> ( globalThis.Buffer?.isBuffer ? -> false ) x\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://github.com/mathiasbynens/mothereff.in/blob/master/js-variables/eff.js and\n  https://mathiasbynens.be/notes/javascript-identifiers-es6 ###\n  jsidentifier:  ( x ) ->\n    return false unless @text x\n    return ( x.match \\\n      /// ^ (?: [ $_ ] | \\p{ID_Start} ) (?: [ $ _ \\u{200c} \\u{200d} ] | \\p{ID_Continue} )* $ ///u )?\n\n  #=========================================================================================================\n  # Container Types\n  #---------------------------------------------------------------------------------------------------------\n  list:       ( x ) -> Array.isArray x\n  set:        ( x ) -> x instanceof Set\n  map:        ( x ) -> x instanceof Map\n  # sized:      ( x ) -> try ( ( Reflect.has x, 'length' ) or ( Reflect.has x, 'size' ) ) catch error then false\n\n  # container:  ( x ) -> ( typeof x ) isnt 'string' and ( @iterable x ) and ( @sized x )\n  # iterable:   ( x ) -> ( ( typeof x ) is 'string' ) and try ( Reflect.has Symbol.iterator ) catch error then false\n\n  #=========================================================================================================\n  # Numeric Types\n  #---------------------------------------------------------------------------------------------------------\n  infinity:      ( x ) -> ( x is +Infinity ) or ( x is -Infinity )\n  float:         ( x ) -> Number.isFinite x\n  numeric:       ( x ) -> ( Number.isFinite x ) or ( typeof x is 'bigint' )\n  bigint:        ( x ) -> typeof x is 'bigint'\n  integer:       ( x ) -> Number.isInteger x\n  codepointid:   ( x ) -> ( @integer x ) and ( 0x00000 <= x <= 0x1ffff )\n  cardinal:      ( x ) -> ( Number.isInteger x ) and ( x >= 0 )\n  zero:          ( x ) -> ( x is 0 ) or ( x is 0n ) ### NOTE true for -0 as well ###\n  nan:           ( x ) -> Number.isNaN x\n  nonzero:       ( x ) -> ( @numeric x ) and ( not @zero x )\n\n  #---------------------------------------------------------------------------------------------------------\n  even:          ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) is   0\n    else if typeof x is 'bigint'  then return ( x % 2n ) is   0n\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  odd:           ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) isnt 0\n    else if typeof x is 'bigint'  then return ( x % 2n ) isnt 0n\n    return false\n\n  #=========================================================================================================\n  # Classes\n  #---------------------------------------------------------------------------------------------------------\n  class:         ( x ) ->\n    ( ( Object::toString.call x ) is '[object Function]' ) and \\\n      ( Object.getOwnPropertyDescriptor x, 'prototype' )?.writable is false\n\n  #=========================================================================================================\n  # Other Types\n  #---------------------------------------------------------------------------------------------------------\n  boolean:        ( x ) -> ( x is true ) or ( x is false )\n  object:         ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  buffer:         ( x ) -> if globalThis.Buffer? then Buffer.isBuffer x else false\n  function:       ( x ) -> isa_function x\n  asyncfunction:  ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:         ( x ) -> ( typeof x ) is 'symbol'\n\n  #=========================================================================================================\n  # Existential Types\n  #---------------------------------------------------------------------------------------------------------\n  nothing:        ( x ) -> not x?\n  something:      ( x ) -> x?\n  anything:       ( x ) -> true\n\n\n#===========================================================================================================\ndo rename_isa_methods = =>\n  for key in props.public_keys Isa::\n    continue unless isa_function ( f = Isa::[ key ] )\n    do ( f ) =>\n      props.nameit \"isa_#{key}\", f\n      ### TAINT `isa` methods should be called in the context of their `types` instance ###\n      Isa::[ \"optional_#{key}\" ] = props.nameit \"isa_optional_#{key}\", ( x ) -> ( not x? ) or ( f.call @, x )\n      return null\n  # console.log 26575, Isa::[ key ] for key in props.public_keys Isa::\n  return null\n\n\n#===========================================================================================================\nclass Validate extends Isa\n\n  #---------------------------------------------------------------------------------------------------------\n  clasz = @\n\n  #---------------------------------------------------------------------------------------------------------\n  @create_proxy: ( x ) -> new Proxy x,\n    get: ( target, key, receiver ) =>\n      return target[ accessor ] if Reflect.has target, accessor\n      return target[ accessor ] if ( typeof accessor ) isnt 'string'\n      return target[ accessor ] if accessor.startsWith '_'\n      if Reflect.has target, '__get_handler'\n        ast = if ( Reflect.has target, '__parser' ) then target.__parser.parse accessor else null\n        if ( R = target.__get_handler accessor, ast )?\n          R = target.__nameit '###' + accessor, R\n          GUY.props.hide target, accessor, R\n          return R\n      throw new E.Unknown_accessor '^Intervoke_proxy/proxy.get@1^', accessor\n\n  #---------------------------------------------------------------------------------------------------------\n  # constructor: -> clasz.create_proxy @\n\n#===========================================================================================================\nclass Types\n\n  #---------------------------------------------------------------------------------------------------------\n  clasz = @\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @create_proxy: ( x ) -> new Proxy x,\n  #   get: ( target, key, receiver ) =>\n  #     return target[ accessor ] if Reflect.has target, accessor\n  #     return target[ accessor ] if ( typeof accessor ) isnt 'string'\n  #     return target[ accessor ] if accessor.startsWith '_'\n  #     if Reflect.has target, '__get_handler'\n  #       ast = if ( Reflect.has target, '__parser' ) then target.__parser.parse accessor else null\n  #       if ( R = target.__get_handler accessor, ast )?\n  #         R = target.__nameit '###' + accessor, R\n  #         GUY.props.hide target, accessor, R\n  #         return R\n  #     throw new E.Unknown_accessor '^Intervoke_proxy/proxy.get@1^', accessor\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @isa                    = new Isa()\n    @_compile_isa_method_catalog()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_isa_method_catalog: ->\n    @_isa_methods           = []\n    for type in props.public_keys @isa\n      continue unless isa_function ( isa_method = Isa::[ type ] )\n      continue if type in [ 'nothing', 'something', 'anything', ]\n      continue if type.startsWith 'optional_'\n      @_isa_methods.push [ type, isa_method, ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( x ) ->\n    for [ type, isa_method, ] in @_isa_methods\n      return type if isa_method.call @isa, x\n    # debug '^Types::type_of@1^', @get_denicola_device_name x\n    return type.toLowerCase() unless ( type = @get_denicola_device_name x ) is '0'\n    ### TAINT return class name? ###\n    ### TAINT raise exception? ###\n    return 'something'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_miller_device_name:   ( x ) -> R = Object::toString.call x; R[ 8 ... R.length - 1 ]\n  get_denicola_device_name: ( x ) -> x?.constructor.name ? '0'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_carter_device_name: ( x, miller_device_name = null ) ->\n    miller_device_name ?= Object::toString.call x\n    return 'other'  unless miller_device_name in [ '[object Function]', 'Function', ]\n    return 'fn'     unless ( descriptor = Object.getOwnPropertyDescriptor x, 'prototype' )?\n    return 'fn'     if descriptor.writable\n    return 'class'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_type_signature: ( x ) -> [\n    ( typeof                    x                   )\n    ( @get_miller_device_name   x                   )\n    ( @get_denicola_device_name x                   )\n    ( @get_carter_device_name   x                   )\n    ( if Number.isNaN           x then 'N' else '0' ) ].join '/'\n\n#===========================================================================================================\ndo =>\n  module.exports =\n    Isa:        Isa\n    Validate:   Validate\n    Types:      Types\n    isa:        new Isa()\n    validate:   new Validate()\n    types:      new Types()\n\n"
  ]
}