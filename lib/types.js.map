{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nprops                     = require './props'\nisa_function              = ( x ) -> ( Object::toString.call x ) is '[object Function]'\n{ debug }                 = console\n\n\n#===========================================================================================================\n@Isa = class Isa\n\n  #=========================================================================================================\n  # Bottom Types\n  #---------------------------------------------------------------------------------------------------------\n  null:          ( x ) -> x is null\n  undefined:     ( x ) -> x is undefined\n\n  #=========================================================================================================\n  # Textual Types\n  #---------------------------------------------------------------------------------------------------------\n  text:          ( x ) ->\n    debug '^text@1^', @constructor.name\n    debug '^text@2^', @isa.constructor.name\n  codepoint:     ( x ) -> ( ( typeof x ) is 'string' ) and /^.$/u.test x\n  regex:         ( x ) -> ( Object::toString.call x ) is '[object RegExp]'\n  buffer:        ( x ) -> ( globalThis.Buffer?.isBuffer ? -> false ) x\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://github.com/mathiasbynens/mothereff.in/blob/master/js-variables/eff.js and\n  https://mathiasbynens.be/notes/javascript-identifiers-es6 ###\n  jsidentifier:  ( x ) ->\n    debug '^jsidentifier@1^', @constructor.name\n    debug '^jsidentifier@2^', @isa.constructor.name\n    return false unless @isa.text x\n    return ( x.match \\\n      /// ^ (?: [ $_ ] | \\p{ID_Start} ) (?: [ $ _ \\u{200c} \\u{200d} ] | \\p{ID_Continue} )* $ ///u )?\n\n  #=========================================================================================================\n  # Container Types\n  #---------------------------------------------------------------------------------------------------------\n  list:       ( x ) -> Array.isArray x\n  set:        ( x ) -> x instanceof Set\n  map:        ( x ) -> x instanceof Map\n  # sized:      ( x ) -> try ( ( Reflect.has x, 'length' ) or ( Reflect.has x, 'size' ) ) catch error then false\n\n  # container:  ( x ) -> ( typeof x ) isnt 'string' and ( @isa.iterable x ) and ( @isa.sized x )\n  # iterable:   ( x ) -> ( ( typeof x ) is 'string' ) and try ( Reflect.has Symbol.iterator ) catch error then false\n\n  #=========================================================================================================\n  # Numeric Types\n  #---------------------------------------------------------------------------------------------------------\n  infinity:      ( x ) -> ( x is +Infinity ) or ( x is -Infinity )\n  float:         ( x ) -> Number.isFinite x\n  numeric:       ( x ) -> ( Number.isFinite x ) or ( typeof x is 'bigint' )\n  bigint:        ( x ) -> typeof x is 'bigint'\n  integer:       ( x ) -> Number.isInteger x\n  codepointid:   ( x ) ->\n    debug '^codepointid@1^', @constructor?.name ? '??????????????'\n    debug '^codepointid@2^', @isa?.constructor?.name ? '??????????????'\n    ( @isa.integer x ) and ( 0x00000 <= x <= 0x1ffff )\n  cardinal:      ( x ) -> ( Number.isInteger x ) and ( x >= 0 )\n  zero:          ( x ) -> ( x is 0 ) or ( x is 0n ) ### NOTE true for -0 as well ###\n  nan:           ( x ) -> Number.isNaN x\n  nonzero:       ( x ) -> ( @isa.numeric x ) and ( not @isa.zero x )\n\n  #---------------------------------------------------------------------------------------------------------\n  even:          ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) is   0\n    else if typeof x is 'bigint'  then return ( x % 2n ) is   0n\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  odd:           ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) isnt 0\n    else if typeof x is 'bigint'  then return ( x % 2n ) isnt 0n\n    return false\n\n  #=========================================================================================================\n  # Classes\n  #---------------------------------------------------------------------------------------------------------\n  class:         ( x ) ->\n    ( ( Object::toString.call x ) is '[object Function]' ) and \\\n      ( Object.getOwnPropertyDescriptor x, 'prototype' )?.writable is false\n\n  #=========================================================================================================\n  # Other Types\n  #---------------------------------------------------------------------------------------------------------\n  boolean:        ( x ) -> ( x is true ) or ( x is false )\n  object:         ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  buffer:         ( x ) -> if globalThis.Buffer? then Buffer.isBuffer x else false\n  function:       ( x ) -> isa_function x\n  asyncfunction:  ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:         ( x ) -> ( typeof x ) is 'symbol'\n\n  #=========================================================================================================\n  # Existential Types\n  #---------------------------------------------------------------------------------------------------------\n  nothing:        ( x ) -> not x?\n  something:      ( x ) -> x?\n  anything:       ( x ) -> true\n\n\n#===========================================================================================================\ndo rename_isa_methods = =>\n  for key in props.public_keys Isa::\n    continue unless isa_function ( f = Isa::[ key ] )\n    # do ( f ) =>\n    props.nameit \"isa_#{key}\", f\n      # return null\n  # console.log 26575, Isa::[ key ] for key in props.public_keys Isa::\n  return null\n\n\n#===========================================================================================================\n@Validate = class Validate\n\n#===========================================================================================================\n@Types = class Types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @_compile()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile: ->\n    proto = {}\n    @isa  = Object.create proto\n    debug '^_compile@1^', @isa?.constructor?.name ? '????????????????????????????????????'\n    @_isa_methods = []\n    for type in props.public_keys Isa::\n      method        = Isa::[ type ]\n      continue unless isa_function method\n      method        = method.bind @\n      # if type is 'codepointid'\n      #   debug '^_compile@2^', method 'xxx'\n      #   debug '^_compile@2^', method ''\n      #   debug '^_compile@2^', method 2\n      otype           = \"optional_#{type}\"\n      proto[ type   ] = method\n      proto[ otype  ] = do ( type, method ) =>\n        props.nameit \"isa_#{otype}\", ( x ) => ( not x? ) or ( method x )\n      continue if type in [ 'nothing', 'something', 'anything', ]\n      # continue if type.startsWith 'optional_'\n      @_isa_methods.push [ type, method, ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( x ) ->\n    for [ type, isa_method, ] in @_isa_methods\n      return type if isa_method x\n    # debug '^Types::type_of@1^', @get_denicola_device_name x\n    return type.toLowerCase() unless ( type = @get_denicola_device_name x ) is '0'\n    ### TAINT return class name? ###\n    ### TAINT raise exception? ###\n    return 'something'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_miller_device_name:   ( x ) -> R = Object::toString.call x; R[ 8 ... R.length - 1 ]\n  get_denicola_device_name: ( x ) -> x?.constructor.name ? '0'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_carter_device_name: ( x, miller_device_name = null ) ->\n    miller_device_name ?= Object::toString.call x\n    return 'other'  unless miller_device_name in [ '[object Function]', 'Function', ]\n    return 'fn'     unless ( descriptor = Object.getOwnPropertyDescriptor x, 'prototype' )?\n    return 'fn'     if descriptor.writable\n    return 'class'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_type_signature: ( x ) -> [\n    ( typeof                    x                   )\n    ( @get_miller_device_name   x                   )\n    ( @get_denicola_device_name x                   )\n    ( @get_carter_device_name   x                   )\n    ( if Number.isNaN           x then 'N' else '0' ) ].join '/'\n\n\n#===========================================================================================================\nmodule.exports          = new Types()\nmodule.exports.Types    = Types\nmodule.exports.Isa      = Isa\nmodule.exports.Validate = Validate\n\n"
  ]
}