{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nprops                     = require './props'\nisa_function              = ( x ) -> ( Object::toString.call x ) is '[object Function]'\n\n\n#===========================================================================================================\nclass Isa\n\n  #=========================================================================================================\n  # Bottom Types\n  #---------------------------------------------------------------------------------------------------------\n  null:          ( x ) -> x is null\n  undefined:     ( x ) -> x is undefined\n\n\n  #=========================================================================================================\n  # Existential Types\n  #---------------------------------------------------------------------------------------------------------\n  anything:      ( x ) -> true\n  something:     ( x ) -> x?\n  nothing:       ( x ) -> not x?\n\n\n  #=========================================================================================================\n  # Textual Types\n  #---------------------------------------------------------------------------------------------------------\n  text:          ( x ) -> ( typeof x ) is 'string'\n  codepoint:     ( x ) -> ( ( typeof x ) is 'string' ) and /^.$/u.test x\n  codepointid:   ( x ) -> @integer x and ( 0x00000 <= x <= 0x1ffff )\n  regex:         ( x ) -> ( Object::toString.call x ) is '[object RegExp]'\n  buffer:        ( x ) -> ( globalThis.Buffer?.isBuffer ? -> false ) x\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://github.com/mathiasbynens/mothereff.in/blob/master/js-variables/eff.js and\n  https://mathiasbynens.be/notes/javascript-identifiers-es6 ###\n  jsidentifier:  ( x ) ->\n    return false unless @text x\n    return ( x.match \\\n      /// ^ (?: [ $_ ] | \\p{ID_Start} ) (?: [ $ _ \\u{200c} \\u{200d} ] | \\p{ID_Continue} )* $ ///u )?\n\n\n  #=========================================================================================================\n  # Container Types\n  #---------------------------------------------------------------------------------------------------------\n  list:          ( x ) -> Array.isArray x\n  set:           ( x ) -> x instanceof Set\n  map:           ( x ) -> x instanceof Map\n  # sized:         ( x ) -> ( @size_of x, @_signals.nothing ) isnt @_signals.nothing\n  iterable:      ( x ) -> x? and x[ Symbol.iterator ]?\n  container:     ( x ) -> ( typeof x ) isnt 'string' and ( @iterable x ) and ( @sized x )\n\n  #=========================================================================================================\n  # Numeric Types\n  #---------------------------------------------------------------------------------------------------------\n  numeric:       ( x ) -> ( Number.isFinite x ) or ( typeof x is 'bigint' )\n  float:         ( x ) -> Number.isFinite x\n  bigint:        ( x ) -> typeof x is 'bigint'\n  integer:       ( x ) -> Number.isInteger x\n  cardinal:      ( x ) -> ( Number.isInteger x ) and ( x >= 0 )\n  zero:          ( x ) -> x is 0 ### NOTE true for -0 as well ###\n  nan:           ( x ) -> Number.isNaN x\n\n  #---------------------------------------------------------------------------------------------------------\n  even:          ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) is   0\n    else if typeof x is 'bigint'  then return ( x % 2n ) is   0n\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  odd:           ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) isnt 0\n    else if typeof x is 'bigint'  then return ( x % 2n ) isnt 0n\n    return false\n\n\n  #=========================================================================================================\n  # Other Types\n  #---------------------------------------------------------------------------------------------------------\n  boolean:       ( x ) -> ( x is true ) or ( x is false )\n  object:        ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  function:      ( x ) -> isa_function x\n  asyncfunction: ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:        ( x ) -> ( typeof x ) is 'symbol'\n\n  #---------------------------------------------------------------------------------------------------------\n  class:         ( x ) ->\n    ( ( Object::toString.call x ) is '[object Function]' ) and \\\n      ( Object.getOwnPropertyDescriptor x, 'prototype' )?.writable is false\n\n#===========================================================================================================\ndo rename_isa_methods = =>\n  for key in props.public_keys Isa::\n    continue unless isa_function ( f = Isa::[ key ] )\n    props.nameit \"isa_#{key}\", f\n  # console.log 26575, Isa::[ key ] for key in props.public_keys Isa::\n  return null\n\n\n#===========================================================================================================\nclass Validate extends Isa\n\n  #---------------------------------------------------------------------------------------------------------\n  clasz = @\n\n  #---------------------------------------------------------------------------------------------------------\n  @create_proxy: ( x ) -> new Proxy x,\n    get: ( target, key, receiver ) =>\n      return target[ accessor ] if Reflect.has target, accessor\n      return target[ accessor ] if ( typeof accessor ) isnt 'string'\n      return target[ accessor ] if accessor.startsWith '_'\n      if Reflect.has target, '__get_handler'\n        ast = if ( Reflect.has target, '__parser' ) then target.__parser.parse accessor else null\n        if ( R = target.__get_handler accessor, ast )?\n          R = target.__nameit '###' + accessor, R\n          GUY.props.hide target, accessor, R\n          return R\n      throw new E.Unknown_accessor '^Intervoke_proxy/proxy.get@1^', accessor\n\n  #---------------------------------------------------------------------------------------------------------\n  # constructor: -> clasz.create_proxy @\n\n#===========================================================================================================\nclass Types\n\n  #---------------------------------------------------------------------------------------------------------\n  clasz = @\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @create_proxy: ( x ) -> new Proxy x,\n  #   get: ( target, key, receiver ) =>\n  #     return target[ accessor ] if Reflect.has target, accessor\n  #     return target[ accessor ] if ( typeof accessor ) isnt 'string'\n  #     return target[ accessor ] if accessor.startsWith '_'\n  #     if Reflect.has target, '__get_handler'\n  #       ast = if ( Reflect.has target, '__parser' ) then target.__parser.parse accessor else null\n  #       if ( R = target.__get_handler accessor, ast )?\n  #         R = target.__nameit '###' + accessor, R\n  #         GUY.props.hide target, accessor, R\n  #         return R\n  #     throw new E.Unknown_accessor '^Intervoke_proxy/proxy.get@1^', accessor\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @isa = new Isa()\n\n\n#===========================================================================================================\ndo =>\n  module.exports =\n    Isa:        Isa\n    Validate:   Validate\n    isa:        new Isa()\n    validate:   new Validate()\n\n"
  ]
}