{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/time.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA;;;EAGA,QAAA,GACC;IAAA,YAAA,EAAiB,CAAjB;IACA,cAAA,EAAiB,GADjB;IAEA,SAAA,EAAiB,EAFjB;IAGA,SAAA,EAAiB;EAHjB,EAJD;;;EAUA,SAAA,GACE;IAAA,WAAA,EAAgB;EAAhB,EAXF;;;;;;EAiBA,IAAA,GACE;IAAA,YAAA,EAAc,IAAd;IACA,UAAA,EAAc;EADd,EAlBF;;;EAsBM,OAAN,MAAA,KAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;MACX,GAAA,GAAoB,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;MACpB,GAAG,CAAC,YAAJ,GAAoB,GAAG,CAAC,SAAJ,GAAgB,SAAS,CAAC,WAA1B,GAAwC;MAC5D,IAAC,CAAA,GAAD,GAAoB,MAAM,CAAC,MAAP,CAAc,GAAd;AACpB,aAAO;IAJI,CADf;;;IAQE,OAA4B,CAAA,CAAA;AAAE,UAAA;aAAC,aAAA,GAAgB,WAAW,CAAC,UAAZ,GAAyB,WAAW,CAAC,GAAZ,CAAA;IAA5C;;IAC5B,OAAS,CAAE,UAAU,IAAZ,CAAA;aAAsB,CAC7B,mBAAE,UAAU,IAAC,CAAA,OAAD,CAAA,CAAZ,CAAwB,CAAC,OAAzB,CAAiC,SAAS,CAAC,WAA3C,CAD6B,CAC2B,CAAC,QAD5B,CACqC,IAAC,CAAA,GAAG,CAAC,YAD1C,EACwD,IAAC,CAAA,GAAG,CAAC,SAD7D;IAAtB,CATX;;;IAaE,YAAc,CAAA,CAAA;AAChB,UAAA;MAAI,IAAG,CAAE,OAAA,GAAU,IAAC,CAAA,OAAD,CAAA,CAAZ,CAAA,KAA4B,IAAI,CAAC,YAApC;QACE,IAAI,CAAC,UAAL,GADF;OAAA,MAAA;QAGE,IAAI,CAAC,YAAL,GAAoB;QACpB,IAAI,CAAC,UAAL,GAAoB,EAJtB;;AAKA,aAAO,CAAE,IAAI,CAAC,YAAP,EAAqB,IAAI,CAAC,UAA1B;IANK,CAbhB;;;IAsBE,YAAc,CAAE,UAAU,IAAZ,EAAkB,QAAQ,IAA1B,CAAA;MACZ,IAAG,eAAH;;UACE,QAAS;SADX;OAAA,MAAA;QAGE,CAAE,OAAF,EAAW,KAAX,CAAA,GAAsB,IAAC,CAAA,YAAD,CAAA,EAHxB;;AAIA,aAAO,CAAI,IAAC,CAAA,OAAD,CAAS,OAAT,CAAJ,EAA0B,KAAK,CAAC,QAAN,CAAA,CAAgB,CAAC,QAAjB,CAA0B,IAAC,CAAA,GAAG,CAAC,YAA/B,EAA6C,GAA7C,CAA1B;IALK,CAtBhB;;;IA8BE,YAAc,CAAE,UAAU,IAAZ,EAAkB,QAAQ,IAA1B,CAAA;aAAoC,CAAE,IAAC,CAAA,YAAD,CAAc,OAAd,EAAuB,KAAvB,CAAF,CAAgC,CAAC,IAAjC,CAAsC,IAAC,CAAA,GAAG,CAAC,cAA3C;IAApC;;EAhChB;;EAkCA,IAAA,GAAkB,IAAI,IAAJ,CAAA;;EAClB,IAAI,CAAC,IAAL,GAAkB;;EAClB,MAAM,CAAC,OAAP,GAAkB;AA1DlB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\ndefaults =\n count_digits:    3\n counter_joiner:  ':'\n ms_digits:       13\n ms_padder:       '0'\n\n#-----------------------------------------------------------------------------------------------------------\nconstants =\n  ms_decimals:    3\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT consider to keep these memo values as `globalThis[some_symbol].last_stamp_f` to ensure it being\nshared as widely as possible, in the not-so unlikely event that two scripts make use of two different\ninstances of `webguy`. ###\nmemo =\n  last_stamp_f: null\n  last_count:   0\n\n#===========================================================================================================\nclass Time\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg               = { defaults..., cfg..., }\n    cfg.ms_padlength  = cfg.ms_digits + constants.ms_decimals + 1\n    @cfg              = Object.freeze cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  stamp_f:                    -> utc_timestamp = performance.timeOrigin + performance.now()\n  stamp_s: ( stamp_f = null ) -> (\n    ( stamp_f ? @stamp_f() ).toFixed constants.ms_decimals ).padStart @cfg.ms_padlength, @cfg.ms_padder\n\n  #---------------------------------------------------------------------------------------------------------\n  monostamp_f2: ->\n    if ( stamp_f = @stamp_f() ) is memo.last_stamp_f\n      memo.last_count++\n    else\n      memo.last_stamp_f = stamp_f\n      memo.last_count   = 0\n    return [ memo.last_stamp_f, memo.last_count, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  monostamp_s2: ( stamp_f = null, count = null ) ->\n    if stamp_f?\n      count ?= 0\n    else\n      [ stamp_f, count, ] = @monostamp_f2()\n    return [ ( @stamp_s stamp_f ), ( count.toString().padStart @cfg.count_digits, '0' ), ]\n\n  #---------------------------------------------------------------------------------------------------------\n  monostamp_s1: ( stamp_f = null, count = null ) -> ( @monostamp_s2 stamp_f, count ).join @cfg.counter_joiner\n\nTIME            = new Time()\nTIME.Time       = Time\nmodule.exports  = TIME\n"
  ]
}