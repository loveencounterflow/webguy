{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_levithan-format-date.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n```\n/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\nvar dateFormat = function () {\n  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n    timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n    timezoneClip = /[^-+\\dA-Z]/g,\n    pad = function (val, len) {\n      val = String(val);\n      len = len || 2;\n      while (val.length < len) val = \"0\" + val;\n      return val;\n    };\n\n  // Regexes and supporting functions are cached through closure\n  return function (date, mask, utc) {\n    var dF = dateFormat;\n\n    // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n    if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n      mask = date;\n      date = undefined;\n    }\n\n    // Passing date through Date applies Date.parse, if necessary\n    date = date ? new Date(date) : new Date;\n    if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n    mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n    // Allow setting the utc argument via the mask\n    if (mask.slice(0, 4) == \"UTC:\") {\n      mask = mask.slice(4);\n      utc = true;\n    }\n\n    var _ = utc ? \"getUTC\" : \"get\",\n      d = date[_ + \"Date\"](),\n      D = date[_ + \"Day\"](),\n      m = date[_ + \"Month\"](),\n      y = date[_ + \"FullYear\"](),\n      H = date[_ + \"Hours\"](),\n      M = date[_ + \"Minutes\"](),\n      s = date[_ + \"Seconds\"](),\n      L = date[_ + \"Milliseconds\"](),\n      o = utc ? 0 : date.getTimezoneOffset(),\n      flags = {\n        d:    d,\n        dd:   pad(d),\n        ddd:  dF.i18n.dayNames[D],\n        dddd: dF.i18n.dayNames[D + 7],\n        m:    m + 1,\n        mm:   pad(m + 1),\n        mmm:  dF.i18n.monthNames[m],\n        mmmm: dF.i18n.monthNames[m + 12],\n        yy:   String(y).slice(2),\n        yyyy: y,\n        h:    H % 12 || 12,\n        hh:   pad(H % 12 || 12),\n        H:    H,\n        HH:   pad(H),\n        M:    M,\n        MM:   pad(M),\n        s:    s,\n        ss:   pad(s),\n        l:    pad(L, 3),\n        L:    pad(L > 99 ? Math.round(L / 10) : L),\n        t:    H < 12 ? \"a\"  : \"p\",\n        tt:   H < 12 ? \"am\" : \"pm\",\n        T:    H < 12 ? \"A\"  : \"P\",\n        TT:   H < 12 ? \"AM\" : \"PM\",\n        Z:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n        o:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n        S:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n      };\n\n    return mask.replace(token, function ($0) {\n      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n    });\n  };\n}();\n\n// Some common format strings\ndateFormat.masks = {\n  \"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n  shortDate:      \"m/d/yy\",\n  mediumDate:     \"mmm d, yyyy\",\n  longDate:       \"mmmm d, yyyy\",\n  fullDate:       \"dddd, mmmm d, yyyy\",\n  shortTime:      \"h:MM TT\",\n  mediumTime:     \"h:MM:ss TT\",\n  longTime:       \"h:MM:ss TT Z\",\n  isoDate:        \"yyyy-mm-dd\",\n  isoTime:        \"HH:MM:ss\",\n  isoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n  isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n};\n\n// Internationalization strings\ndateFormat.i18n = {\n  dayNames: [\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n  ],\n  monthNames: [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ]\n};\n\n// // For convenience...\n// Date.prototype.format = function (mask, utc) {\n//   return dateFormat(this, mask, utc);\n// };\n```\n"
  ]
}